"""
Îπ†Î•∏ ÍµêÏ†ï Î≥¥Ïª¨ Î∂ÑÏÑùÍ∏∞ - Parselmouth ÏóÜÏù¥
"""

import numpy as np
import librosa
import soundfile as sf
from scipy import signal
from scipy.stats import linregress
import subprocess
import tempfile
import os
import warnings
warnings.filterwarnings('ignore')

class FastCorrectedAnalyzer:
    def __init__(self):
        self.sr = 22050
        self.n_fft = 2048
        self.hop_length = 256
        
        # Ï†ïÍ∑úÌôî ÌÜµÍ≥Ñ
        self.reference_stats = {
            'cpp_med': {'mean': 15.0, 'std': 5.0},
            'hnr_med': {'mean': 12.0, 'std': 4.0},
            'tilt_med': {'mean': -8.0, 'std': 3.0},
            'flatness_med': {'mean': 0.3, 'std': 0.1},
            'f0conf_mean': {'mean': 0.8, 'std': 0.15},
            'entropy_norm_med': {'mean': 0.6, 'std': 0.1},
            'h1h2_med': {'mean': 5.0, 'std': 3.0}
        }
    
    def analyze_vocal_file(self, audio_file, source_hint='unknown'):
        """Îπ†Î•∏ Î∂ÑÏÑù"""
        filename = os.path.basename(audio_file)
        print(f"\nüé§ {filename[:30]} Î∂ÑÏÑù Ï§ë...")
        
        try:
            # Ï†ÑÏ≤òÎ¶¨
            audio = self.preprocess_fast(audio_file)
            if audio is None:
                return {'error': 'Ï†ÑÏ≤òÎ¶¨ Ïã§Ìå®'}
            
            print(f"   üìä Í∏∏Ïù¥: {len(audio)/self.sr:.1f}Ï¥à")
            
            # Îπ†Î•∏ ÌäπÏßï Ï∂îÏ∂ú
            features = self.extract_features_fast(audio)
            
            # ÏÜåÏä§ Î≥¥Ï†ï
            features = self.apply_source_correction(features, source_hint)
            
            # Ïä§ÏΩîÏñ¥ÎßÅ
            score, grade, characteristics = self.calculate_score_fast(features)
            
            result = {
                'clarity_score': score,
                'grade': grade,
                'characteristics': characteristics,
                'raw_features': features
            }
            
            print(f"   ‚úÖ ÏÑ†Î™ÖÎèÑ: {score:.1f} ({grade})")
            print(f"   üè∑Ô∏è ÌäπÏßï: {', '.join(characteristics)}")
            
            return result
            
        except Exception as e:
            print(f"   ‚ùå Ïò§Î•ò: {e}")
            return {'error': str(e)}
    
    def preprocess_fast(self, audio_file):
        """Îπ†Î•∏ Ï†ÑÏ≤òÎ¶¨"""
        try:
            # M4A Î≥ÄÌôò
            if audio_file.endswith('.m4a'):
                wav_path = self.convert_m4a_simple(audio_file)
                if wav_path:
                    audio, sr = sf.read(wav_path)
                    os.unlink(wav_path)
                else:
                    audio, sr = sf.read(audio_file)
            else:
                audio, sr = sf.read(audio_file)
            
            # Î™®ÎÖ∏ Î≥ÄÌôò
            if len(audio.shape) > 1:
                audio = np.mean(audio, axis=1)
            
            # 22.05kHz Î¶¨ÏÉòÌîåÎßÅ
            if sr != self.sr:
                audio = librosa.resample(y=audio, orig_sr=sr, target_sr=self.sr)
            
            # Ï†ïÍ∑úÌôî
            rms = np.sqrt(np.mean(audio ** 2))
            if rms > 0:
                audio = audio * (0.1 / rms)
            
            # ÎåÄÏó≠ Ï†úÌïú (80-8000Hz)
            nyquist = self.sr / 2
            b, a = signal.butter(4, [80/nyquist, 8000/nyquist], btype='band')
            audio = signal.filtfilt(b, a, audio)
            
            return audio
            
        except Exception as e:
            print(f"Ï†ÑÏ≤òÎ¶¨ Ïò§Î•ò: {e}")
            return None
    
    def convert_m4a_simple(self, m4a_path):
        """M4A Î≥ÄÌôò"""
        try:
            temp_wav = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)
            temp_wav_path = temp_wav.name
            temp_wav.close()
            
            cmd = ['ffmpeg', '-i', m4a_path, '-ac', '1', '-ar', str(self.sr), temp_wav_path, '-y']
            result = subprocess.run(cmd, capture_output=True, text=True)
            return temp_wav_path if result.returncode == 0 else None
        except:
            return None
    
    def extract_features_fast(self, audio):
        """Îπ†Î•∏ ÌäπÏßï Ï∂îÏ∂ú"""
        features = {}
        
        try:
            # STFT
            stft = librosa.stft(audio, n_fft=self.n_fft, hop_length=self.hop_length)
            magnitude = np.abs(stft)
            power = magnitude ** 2
            freqs = librosa.fft_frequencies(sr=self.sr, n_fft=self.n_fft)
            
            # 1. CPP (Í∞ÑÎã® Î≤ÑÏ†Ñ)
            features['cpp_med'] = self.calculate_cpp_simple(audio)
            
            # 2. HNR (ÏûêÍ∏∞ÏÉÅÍ¥Ä Í∏∞Î∞ò)
            features['hnr_med'] = self.calculate_hnr_simple(audio)
            
            # 3. Spectral Tilt (300-3000Hz)
            features['tilt_med'] = self.calculate_tilt_simple(power, freqs)
            
            # 4. Spectral Flatness
            features['flatness_med'] = self.calculate_flatness_simple(power, freqs)
            
            # 5. F0 confidence (Í∞ÑÎã® Ï∂îÏ†ï)
            features['f0conf_mean'] = self.estimate_f0_confidence(audio)
            
            # 6. H1-H2 (Í∞ÑÎã® Î≤ÑÏ†Ñ)
            features['h1h2_med'] = self.calculate_h1h2_simple(audio)
            
            # 7. Mel entropy
            features['entropy_norm_med'] = self.calculate_entropy_simple(audio)
            
            return features
            
        except Exception as e:
            print(f"ÌäπÏßï Ï∂îÏ∂ú Ïò§Î•ò: {e}")
            return {
                'cpp_med': 10.0, 'hnr_med': 10.0, 'tilt_med': -5.0,
                'flatness_med': 0.3, 'f0conf_mean': 0.5, 'h1h2_med': 5.0,
                'entropy_norm_med': 0.6
            }
    
    def calculate_cpp_simple(self, audio):
        """Í∞ÑÎã® CPP"""
        try:
            spectrum = np.fft.rfft(audio)
            log_spectrum = np.log(np.abs(spectrum) + 1e-10)
            cepstrum = np.fft.irfft(log_spectrum)
            
            start_idx = int(0.002 * self.sr)
            end_idx = int(0.02 * self.sr)
            
            if end_idx < len(cepstrum):
                peak = np.max(cepstrum[start_idx:end_idx])
                baseline = np.mean(cepstrum[start_idx:end_idx])
                return max(0, min(30, (peak - baseline) * 1000))
            return 10.0
        except:
            return 10.0
    
    def calculate_hnr_simple(self, audio):
        """Í∞ÑÎã® HNR"""
        try:
            autocorr = np.correlate(audio, audio, mode='full')
            autocorr = autocorr[len(autocorr)//2:]
            
            if len(autocorr) > self.sr//50:
                max_corr = np.max(autocorr[self.sr//400:self.sr//50])
                noise_level = 1 - max_corr / (autocorr[0] + 1e-10)
                hnr = 10 * np.log10((max_corr + 1e-10) / (noise_level + 1e-10))
                return max(0, min(30, hnr))
            return 10.0
        except:
            return 10.0
    
    def calculate_tilt_simple(self, power, freqs):
        """Í∞ÑÎã® Spectral Tilt"""
        try:
            mask = (freqs >= 300) & (freqs <= 3000)
            if np.sum(mask) < 10:
                return -5.0
            
            freq_range = freqs[mask]
            power_mean = np.mean(power[mask, :], axis=1)
            
            if np.sum(power_mean) > 0:
                log_power = 10 * np.log10(power_mean + 1e-10)
                log_freq = np.log10(freq_range + 1e-10)
                slope, _, _, _, _ = linregress(log_freq, log_power)
                return slope * np.log10(2)
            return -5.0
        except:
            return -5.0
    
    def calculate_flatness_simple(self, power, freqs):
        """Í∞ÑÎã® Spectral Flatness"""
        try:
            mask = (freqs >= 80) & (freqs <= 8000)
            if np.sum(mask) < 10:
                return 0.3
            
            power_mean = np.mean(power[mask, :], axis=1)
            if np.sum(power_mean) > 0:
                geometric_mean = np.exp(np.mean(np.log(power_mean + 1e-10)))
                arithmetic_mean = np.mean(power_mean)
                return geometric_mean / (arithmetic_mean + 1e-10)
            return 0.3
        except:
            return 0.3
    
    def estimate_f0_confidence(self, audio):
        """F0 Ïã†Î¢∞ÎèÑ Ï∂îÏ†ï"""
        try:
            f0 = librosa.yin(audio, fmin=80, fmax=800, frame_length=2048)
            voiced_frames = f0 > 0
            return np.sum(voiced_frames) / len(f0) if len(f0) > 0 else 0.5
        except:
            return 0.5
    
    def calculate_h1h2_simple(self, audio):
        """Í∞ÑÎã® H1-H2"""
        try:
            f0 = librosa.yin(audio, fmin=80, fmax=800, frame_length=2048)
            valid_f0 = f0[f0 > 0]
            
            if len(valid_f0) == 0:
                return 5.0
            
            median_f0 = np.median(valid_f0)
            spectrum = np.fft.rfft(audio)
            freqs = np.fft.rfftfreq(len(audio), 1/self.sr)
            magnitude = np.abs(spectrum)
            
            h1_idx = np.argmin(np.abs(freqs - median_f0))
            h2_idx = np.argmin(np.abs(freqs - median_f0 * 2))
            
            h1_energy = magnitude[h1_idx]
            h2_energy = magnitude[h2_idx]
            
            if h2_energy > 0:
                h1h2 = 20 * np.log10((h1_energy + 1e-10) / (h2_energy + 1e-10))
                return np.clip(h1h2, -10, 20)
            return 5.0
        except:
            return 5.0
    
    def calculate_entropy_simple(self, audio):
        """Í∞ÑÎã® ÏóîÌä∏Î°úÌîº"""
        try:
            mel_spec = librosa.feature.melspectrogram(y=audio, sr=self.sr, n_mels=40, 
                                                     fmin=80, fmax=8000, n_fft=self.n_fft)
            
            entropy_values = []
            for frame_idx in range(mel_spec.shape[1]):
                mel_frame = mel_spec[:, frame_idx]
                if np.sum(mel_frame) > 0:
                    p = mel_frame / np.sum(mel_frame)
                    h = -np.sum(p * np.log(p + 1e-10))
                    h_norm = h / np.log(40)
                    entropy_values.append(h_norm)
            
            return np.median(entropy_values) if entropy_values else 0.6
        except:
            return 0.6
    
    def apply_source_correction(self, features, source_hint):
        """ÏÜåÏä§ Î≥¥Ï†ï"""
        corrected = features.copy()
        
        if source_hint == 'kakaotalk':
            corrected['hnr_med'] -= 1.0
            corrected['tilt_med'] += 0.5
            corrected['flatness_med'] += 0.02
        elif source_hint == 'amr_nb':
            corrected['hnr_med'] -= 2.0
            corrected['entropy_norm_med'] += 0.05
        
        return corrected
    
    def calculate_score_fast(self, features):
        """Îπ†Î•∏ Ïä§ÏΩîÏñ¥ÎßÅ"""
        try:
            # Z-score Ï†ïÍ∑úÌôî
            z_scores = {}
            for key, value in features.items():
                if key in self.reference_stats:
                    stats = self.reference_stats[key]
                    z_scores[key] = (value - stats['mean']) / stats['std']
                else:
                    z_scores[key] = 0
            
            # Clarity Í≥ÑÏÇ∞
            clarity_raw = (
                z_scores['cpp_med'] + z_scores['hnr_med'] - z_scores['tilt_med'] - 
                z_scores['flatness_med'] + 0.5 * z_scores['f0conf_mean'] - 
                0.5 * z_scores['entropy_norm_med'] - 0.5 * z_scores['h1h2_med']
            )
            
            # ÏãúÍ∑∏Î™®Ïù¥Îìú Ï†ïÍ∑úÌôî
            clarity_score = 100 * (1 / (1 + np.exp(-clarity_raw / 2)))
            
            # Cap Í∑úÏπô
            if features['h1h2_med'] > 8 or features['hnr_med'] < 10:
                clarity_score = min(clarity_score, 60)
            
            # Îì±Í∏â
            if clarity_score >= 70:
                grade = "High"
            elif clarity_score >= 40:
                grade = "Medium"
            else:
                grade = "Low"
            
            # ÌäπÏßï
            characteristics = []
            if features['tilt_med'] > -6:
                characteristics.append("Î∞ùÏùå")
            else:
                characteristics.append("Ïñ¥ÎëêÏõÄ")
            
            if features['hnr_med'] > 15:
                characteristics.append("Íπ®ÎÅóÌï®")
            elif features['hnr_med'] < 10:
                characteristics.append("Í±∞Ïπ®")
            
            if features['h1h2_med'] > 8:
                characteristics.append("Ïà®ÏÑûÏûÑ")
            
            return clarity_score, grade, characteristics
            
        except:
            return 50.0, "Medium", ["Î∂ÑÏÑù Ïã§Ìå®"]

def test_fast_analyzer():
    """Îπ†Î•∏ ÌÖåÏä§Ìä∏"""
    print("=" * 60)
    print("üöÄ Îπ†Î•∏ ÍµêÏ†ï Î∂ÑÏÑùÍ∏∞ ÌÖåÏä§Ìä∏")
    print("=" * 60)
    
    test_files = [
        (r"C:\Users\user\Desktop\vocals_extracted\ÍπÄÎ≤îÏàò_ÍπÄÎ≤îÏàò - Dear Love_Î≥¥Ïª¨.wav", "unknown"),
        (r"C:\Users\user\Documents\Ïπ¥Ïπ¥Ïò§ÌÜ° Î∞õÏùÄ ÌååÏùº\kakaotalk_1756474302376.m4a", "kakaotalk"),
        (r"C:\Users\user\Desktop\vocals_extracted\Î°úÏù¥ÌÇ¥_Î°úÏù¥ÌÇ¥ - As Is_Î≥¥Ïª¨.wav", "unknown"),
        (r"C:\Users\user\Documents\ÏÜåÎ¶¨ ÎÖπÏùå\Í∞ÄÏÑ±_Í∞ÄÏÑ±ÎπÑÎ∏åÎùºÌÜ†.wav", "unknown")
    ]
    
    analyzer = FastCorrectedAnalyzer()
    results = []
    
    for audio_file, source_hint in test_files:
        if os.path.exists(audio_file):
            result = analyzer.analyze_vocal_file(audio_file, source_hint=source_hint)
            if 'clarity_score' in result:
                filename = os.path.basename(audio_file)
                results.append({
                    'file': filename[:15],
                    'score': result['clarity_score'],
                    'grade': result['grade'],
                    'characteristics': ', '.join(result['characteristics'])
                })
    
    # Í≤∞Í≥º Ï∂úÎ†•
    if results:
        print("\n" + "=" * 70)
        print("üèÜ ÏµúÏ¢Ö Í≤∞Í≥º")
        print("=" * 70)
        
        print(f"\n{'ÌååÏùº':<17} | {'ÏÑ†Î™ÖÎèÑ':<6} | {'Îì±Í∏â':<6} | {'ÌäπÏßï'}")
        print("-" * 60)
        
        for r in results:
            print(f"{r['file']:<17} | {r['score']:<6.1f} | {r['grade']:<6} | {r['characteristics']}")
        
        print(f"\nüí° ÏòàÏÉÅ: ÍπÄÎ≤îÏàò > kakaotalk > Î°úÏù¥ÌÇ¥ > Í∞ÄÏÑ±")
        sorted_results = sorted(results, key=lambda x: x['score'], reverse=True)
        actual = " > ".join([r['file'][:8] for r in sorted_results])
        print(f"üí° Ïã§Ï†ú: {actual}")

if __name__ == "__main__":
    test_fast_analyzer()